{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/elilimarakathalingasivam/visbo/app/api/generate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  project: process.env.OPENAI_PROJECT_ID      // comment out if you use sk-live-… key\n});\n\n/* -------------------------------------------------------------------------- */\n/* POST /api/generate                                                          */\n/* body: { prompt: string, numImages?: number }                                */\n/* returns: { images: string[] } or { error: string }                          */\n/* -------------------------------------------------------------------------- */\nexport async function POST(req: NextRequest) {\n  try {\n    const { prompt, numImages = 1 } = await req.json();\n\n    if (!prompt || typeof prompt !== \"string\") {\n      return NextResponse.json({ error: \"No prompt supplied\" }, { status: 400 });\n    }\n\n    const images: string[] = [];\n\n    /* DALL·E 3 → one request per image */\n    const total = Math.max(1, Math.min(numImages, 10)); // safety cap\n\n    for (let i = 0; i < total; i++) {\n      const result = await openai.images.generate({\n        model: \"dall-e-3\",\n        prompt,\n        n: 1,                       // must be 1\n        size: \"1024x1024\",\n        response_format: \"b64_json\"\n      });\n\n      if (!result.data || !result.data[0]) {\n        throw new Error(\"Unexpected response format from OpenAI\");\n      }\n      const b64 = (result.data[0] as any).b64_json as string;\n      images.push(`data:image/png;base64,${b64}`);\n    }\n\n    return NextResponse.json({ images });\n  } catch (err) {\n    /* Forward OpenAI error message */\n    return NextResponse.json(\n      { error: (err as Error).message },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;;;AAEA,MAAM,SAAS,IAAI,wKAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;IAClC,SAAS,QAAQ,GAAG,CAAC,iBAAiB,CAAM,uCAAuC;AACrF;AAOO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,YAAY,CAAC,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhD,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,MAAM,SAAmB,EAAE;QAE3B,oCAAoC,GACpC,MAAM,QAAQ,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,WAAW,MAAM,aAAa;QAEjE,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;YAC9B,MAAM,SAAS,MAAM,OAAO,MAAM,CAAC,QAAQ,CAAC;gBAC1C,OAAO;gBACP;gBACA,GAAG;gBACH,MAAM;gBACN,iBAAiB;YACnB;YAEA,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,EAAE,EAAE;gBACnC,MAAM,IAAI,MAAM;YAClB;YACA,MAAM,MAAM,AAAC,OAAO,IAAI,CAAC,EAAE,CAAS,QAAQ;YAC5C,OAAO,IAAI,CAAC,CAAC,sBAAsB,EAAE,KAAK;QAC5C;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,KAAK;QACZ,gCAAgC,GAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,AAAC,IAAc,OAAO;QAAC,GAChC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}